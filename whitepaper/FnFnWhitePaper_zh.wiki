== 概述 ==

区块链技术作为去中心化的价值传输系统，由匿名人士中本聪首次提出并应用到比特币当中。在比特币系统中，为完成相对复杂的交易类型，中本聪创造性的提出了脚本机制。但当开发者想要通过比特币脚本实现更多的功能时，往往就会收到诸多的限制。为此，Vitalik Buterin提出的Ethereum通过引入图灵完备的智能合约和EVM使得基于区块链技术的应用开发成为可能，并被业界称赞为继比特币之后的“区块链2.0”。

但无论是比特币还是以太坊，都面临着由于用户与交易增长过快所带来的拓展性及交易延迟的问题。究其根源，在于当前区块链系统中单链的结构，使得诸多优秀项目在这些问题面前都缺乏足够的灵活性，区块链在物联网这一天生适用的领域的发展也举步维艰。

为解决这些问题，并更好的将区块链与物联网技术相结合，经过不断地探索论证，我们提出了FnFn（Fission and Fusion Network）树型区块链。FnFn呈“主链+多应用分支”的树状结构，通过分支的无限拓展实现单链结构无法解决的交易拓展性和高并发性问题。同时FnFn作为物联网的基础设施，将建立多实体的设备互信及异构环境下的数据互通。为未来物联网更复杂的商业模式打造稳定可靠的技术基础。

FnFn系统具备以下特点：

# 高拓展性：面对物联网海量的数据交易，通过完善可行的拓展机制来进行交易的容纳;
# 高并发：对于物联网特定场景下的低延迟要求，链上交易可以做到快速响应和确认;
# 数据快速接入：通过良好的系统设计，为流式数据和持久化数据均提供稳定接口和后端服务使得数据快速上链;
# 保护数据安全：数据在用户端进行加密，链上存储数据标识及记录流转，杜绝单一数据中心，保护数据的隐私安全;
# 物联网价值流转平台：作为物联网技术底层的的基础设施，为物联网上的数据传输与价值流转提供稳定可靠的技术平台。

== 系统描述 ==

Fission and fusion network（后简称”FnFn“）是构建于P2P网络的区块系统，同目前流行的P2P虚拟货币系统类似，以去中心化方式维护透明账本，实现用户虚拟资产自主安全管理和高效流动。FnFn系统针对IOT数据业务需求设计，利用区块技术为IOT数据业务提供去中心化安全管理平台，实现IOT系统所需高并发低延迟等性能要求。

FnFn通过安全共识组织用户交易（transaction），按时间顺序形成数据区块。同Bitcoin等单链系统不同，FnFn采用树结构来存储排列区块，可以根据业务类型和数据负载进行分叉形成多个分支。分支之间区块相互独立，新增区块只与自身分支数据相关。在多重分支的情况下，根据业务数据流量，可以分布到多个分支区块中，由此产生的可扩展性和高并发性正是IOT系统所需的基本性能。

FnFn的多重分支结构由唯一安全主链分支和众多业务分支构成，主链分支用于支撑全网共识机制，业务分支用于实际业务。在业务分支可以提供最低2秒的低延迟交易确认，用户可以指定交易紧迫性，支付相应交易手续费，以此实现低延迟业务。

[[Image:Fork.png|center|800px|图2.1 FnFn多重分支结构]]
<center>图2.1 FnFn多重分支结构</center>

FnFn的安全共识机制为DPOS+POW，节点收益为出块奖励息加上块内交易总交易费。用户可以用token为DPOS节点进行投票，投票为DPOS节点增加出块概率。当DPOS节点成功产生新区块，对应投票用户也按投票额度分享出块奖励。节点需要筹集超过token供应总数2%投票才能成为DPOS节点。POW作为DPOS共识的补充，每轮DPOS协商过程有一定概率将首要出块权交给POW共识。参与DPOS过程的token越少，说明DPOS共识的安全性和可靠性越低，这种情况下，通过POW共识获取出块权概率越高，混合POW机制增强系统安全性和可靠性。

FnFn的树状结构中，除了安全主链外，其余分支地位对等且相互独立。DPOS节点群通过安全计算共同建立出块序列，同时产生真随机数信标。业务分支出块系列分配由安全主链的随机数信标计算产生。

根据BA原理，恶意节点少于1/3整个安全计算过程就不会被干扰；合理选择协商算法和参数，可以实现非51%攻击情况下，安全计算过程就不会被控制。在FnFn系统中，共识机制可以达到有较高的一致性，系统性分叉非常罕见，在恶意节点所持token少于参与DPOS总数50%情况下，3个确认可保证主链历史数据不可回滚。

FnFn节点网络由运行FnFn软件的节点构成P2P网络。为了支撑庞大的IOT业务，FnFn服务平台由FnFn节点网络和终端服务网络构成。FnFn节点网络同步校验区块和交易数据,进行共识组织区块数据；终端服务网络形成分布式终端后台,为IOT(Internet Of Things)终端提供接入服务；IOT终端包括智能传感器、控制器和移动终端，内嵌轻客户端程序，本地保存私钥完成交易构建和校验。

[[Image:Network.png|center|800px|图2.2 FnFn网络层次]]
<center>图2.2 FnFn网络层次</center>

FnFn系统软件包括核心钱包程序、轻钱包后台服务系统、移动端轻钱包程序、嵌入式系统轻钱包SDK和在线区块浏览器几部分。核心钱包程序用于主干网络节点和普通用户，对运行环境和硬件有一定要求，可以完整使用区块系统所有功能模块； 轻钱包后台服务系统用于终端服务网络后台服务器，为轻钱包终端提供必要的接入服务； 移动端轻钱包程序用于IOS和Android移动终端，在网络带宽和硬件性能都有较大限制的情况下，为用户提供安全钱包服务；嵌入式系统轻钱包SDK为IOT智能硬件提供轻钱包API，可以通过终端服务器接入FnFn网络，不需要在本地进行繁重的区块同步和区块数据存储，专注与业务相关的交易数据构造和鉴权；在线区块浏览器配合钱包节点实时展现区块系统状态，查询历史区块交易数据。

== 树状区块结构 ==

=== 分支标识 ===

FnFn系统的区块按时间顺序连接在一起，多分支形成树状结构。安全主链以创世纪块hash作为分支ID，业务分支以分叉点后第一个区块的hash作为子分支ID。

[[Image:Forkid.png|center|800px|图3.1 FnFn多重分支标识]]
<center>图3.1 FnFn多重分支标识</center>

如图3.1，子分支ID=HASH(Block’n)
在分叉之前，父分支和子分支拥有完全一致的链结构和交易；分叉点之后则相互独立，互不干扰。出现在分叉点前的同一笔token在父子分支中可以创建不同的交易发送到不同的地址；也可以通过相同交易发送到同一地址，只要该交易出现每个分支的区块中。用户在创建交易的时候需要指定一个锚定区块，标定在此区块之后的所有分支有效。在上图中，如果锚定区块设定为Block n-1, 创建的交易会被包含到两个分支中；如果设定为Blockn，则该交易只在父分支有效，子分支中可以创建新交易将token发送其它地址。

=== 安全主链 ===

安全主链为FnFn树状结构中的主链，所有的支链均为其“后代”，其被用于支撑全区块系统的安全和共识，在P2P网络中主链的同步广播消息转发优先级高于业务分支。

安全主链除了记录主链token转移，还保留DPOS节点协商关键过程数据。安全主链的区块之间不能插入子块，只能按照既定出块间隔增长。由于会有相当部分容量记录共识协商过程数据（50个DPOS节点数据每区块～200KB），安全主链的交易容量低于业务分支。

安全主链以区块系统创世纪块为起点，通过DPOS+POW共识顺序产生区块。安全主链被用于支撑全区块系统的安全和共识，所有业务分支节点都需要同步和校验主链区块头信息。新节点接入网络后，首先完成主链同步，才开始进行对应业务分支同步。

鉴于功能特殊性，有三类与共识机制相关交易是安全主链独有的：1)DPOS节点投票交易；2)DPOS节点登记交易；3) POW出块奖励交易。

# DPOS节点投票交易： DPOS节点产生一个Delegate模板地址，首次需要自己发送token到该地址，完成Delegate地址链上发布；用户创建投票地址将token寄存于Delegate地址，完成token投票，并锁定10080区块。DPOS节点可以使用Delegate地址的投票作为权重参与DPOS协商过程。
# DPOS节点登记交易： DPOS节点在每轮协商需要筹集足够token投票，并以此创建登记交易提前在链上进行登记和发布自己初始协商参数，只有协商轮次开始前完成登记的节点才允许进入协商过程以及获取出块权。
# POW出块奖励交易： POW共识缺省情况下只用于主链共识出块，对应出块奖励通过这类交易提供给参与者。作用和类似Bitcoin中coinbase交易。

安全主链系统参数如下表所示：

{| class="wikitable"
|-
!|参数
!|数值
|-
|初始token总量||745000000
|-
|token年膨胀率||1%
|-
|区块产生间隔||60秒
|-
|区块最大字节数||2MB
|-
|初始出块奖励||15
|-
|最大TPS||156
|-
|DPOS节点最大数量||50
|-
|POW难度调整周期||每个同算法POW区块
|}


=== 业务分支 ===

通过在父分支发送一个分叉交易，抵押一定额度父分支token，用户可以自由创建子分支。

[[Image:Createfork.png|center|800px|图3.2 创建业务分支]]
<center>图3.2 创建业务分支</center>

新创建子分支的第一个区块（分支起始块）被保存在分叉交易中。子分支的token分布可由创建者定义，有三种方式：1）创建独立分支，分支起始块重新设置token总数和分配方式；2）完整继承分叉点token分布；3)继承分叉点token分布，并在此基础上进行增发，增发部分的分布方式在分支起始块中定义。自分叉点之后，子分支token和父分支是完全隔离的。

[[Image:Newfork.png|center|800px|图3.3 创建分支token抵押解冻]]
<center>图3.3 创建分支token抵押解冻</center>

创建分支需要使用父分支token进行抵押，分叉交易中用于抵押的token被发送到一个特殊地址进行冻结。抵押token根据父分支区块高度分阶段解冻，创建者使用自己私钥进行签名后可以将解冻部分token转移到其它地址。创建分支所需抵押token随区块高度递减，每隔525600区块完成一次减半。

业务分支安全性依赖于安全主链的共识机制，可以不设立出块节点，由DPOS节点在获得主链出块权同时为分支产生新区块；也可以借用安全主链产生的随机信标设立本分支的出块机制。这两种应用分别对应公开和封闭业务模型。

业务分支和安全主链相比，在正常每分钟出块间隔中，可以产生子块，用于低延迟交易上链。子块间隔不低于2秒，且不可以产生空块。产生子块的节点由安全主链同高度区块块独立随机信标决定，子块没有额外出块奖励，但可以获取高额交易费收益。

[[Image:Datafork.png|center|800px|图3.4 业务分支区块/子区块产生过程]]
<center>图3.4 业务分支区块/子区块产生过程</center>

FnFn系统中业务分支的区块产生间隔需要和安全主链一致，其它主要参数可以在创建分支初始化过程中由创建者配置，可配置参数包括token总量和分布、出块奖励和增发方式等。

考虑业务分支中的子块，每个业务分支的交易容量可以提高30倍，TPS可达到5200。当数据业务需要更高交易容量和并发性时，可以对针对当前业务分支创建多个分支，以此实现高量级TPS。

== 用户密钥与地址 ==

FnFn的地址有两类：公钥地址和模板地址，分别对应特定公钥和模板。地址长度固定为33字节，在交互性界面中，采用编码后的地址作为输入/输出参数。

<pre>
pubkey address:
encoded address = '1' + BASE32Encode(pubkey + CRC24q(pubkey))

template address:
encoded address = '2' + BASE32Encode(template ID + CRC24q(template ID))
</pre>

其中BASE32Encode采用Crockford方案字符集，但不进行该方案中symbols check过程。

=== 密钥和公钥地址 ===

FnFn系统采用Curve25519作为基本安全算法，用户私钥和公钥均为32字节，私钥签名为64字节。Curve25519安全性和P256相同，是目前同安全性算法中效率最高的非对称安全算法。以类型前缀+公钥作为钱包公钥地址。

<pre>
secret key：
  9b9d0d52a251cf5933bb65e864dfff41ca26d650baf112324f4ce234dfcfe7aa
public key：
  59a317119823caacb0acaed78f029aa2fcfbb9417c298892e660b5fc174cb3b9
encoded address：
  1q6smr5zwpnged4m855y43efvzjh9m0mftyqasc5cs8hsg48qmdcgf9g0
</pre>

为了保证用户私钥安全，在本地存储采用chacha20+poly1305算法加密，需要用户输入密码才可以使用私钥进行签名操作。

=== 模板地址 ===

模板地址由类型前缀+模板ID构成。模板ID由2字节模板类型+参数Hash低位30字节构成。例如一个3-5多重签名模板:

<pre>
public keys：
  1: fcd74aa82a1eb098830a2fcc877735a60152b441c16b2212157c4215db074e88
  2: f1a1ced60a7ecdf83735a3380765f2ef77221f367da05bd901e885b9d799aec5
  3: c2885254a2acefaeb05bd94b0e73e483bded994b02ebd0bc6b3523c2dde558dd
  4: e2de897ad0935bbfd6cca48da2ee285c87ae784285df35513180143ec55c8450
  5: b1f1ce918f30b46aa3d2648810f6153410e44122c042998699323b982664a16f

tempate ID：
  000244c03d536e6175912b3040aa876388b197c21ae55c283f182403ab610852

encoded address：
  2a8463ar34gc3ya2wwmdc55xhh1hrfaj060ns2xb1ds9kvg240803k041
</pre>

=== 带参数模板 ===

时下流行的区块系统都提供运行于不同VM之上的脚本或智能合约，对区块系统基本账本进行强大灵活的功能扩展。尽管发展数年，在区块系统中的VM模块目前还处于起步阶段。除了存在内在安全漏洞等问题外，运行效率和使用费率也在一定程度上限制了智能合约适用范围。FnFn系统不提供脚本和智能合约系统，而是采用带参数过程模板实现常用的脚本和智能合约功能。采用对应模板地址为用户提供功能调用。

FnFn系统提供以下模板
{| class="wikitable"
|-
!|类型标识
!|名称
!|参数
!|描述
|-
|0x0001||带权重多重签名模板||签名所需权重，公钥和对应权重列表||可分别配置参与公钥签名权重，分配不同权限，公钥数不大于16
|-
|0x0002||简单多重签名模板||签名所需数量，公钥列表||参与公钥签名等权重，公钥数不大于16
|-
|0x0003||创建子分支模板||分支创世纪块hash，创建者解冻抵押token地址||创建者可从模板地址取回解冻token
|-
|0x0004||工作量证明共识模板||区块签名公钥，出块收益接收地址||采用出块签名公钥和花费地址分离机制，支持安全冷钱包挖矿
|-
|0x0005||DPOS代理节点模板||区块签名公钥，节点所有者地址||采用出块签名公钥和花费地址分离机制，支持安全冷钱包DPOS过程
|-
|0x0006||跨分支交易模板||交易双方地址||用于进行跨链交易进行身份识别和条件判断
|-
|0x0007||订单交易模板||采购方的公钥和出售方公钥||用于支持数据交易中的订单交易
|}

== 区块与交易 ==
=== 区块结构 ===
FnFn区块包括以下数据：

{| class="wikitable"
|-
!|名称
!|数据类型
!|描述
|-
|nVersion||uint16||版本号
|-
|nType||uint16||类型，区分创世纪块、主链区块、业务区块和业务子区块
|-
|nTimeStamp||uint32||时间戳
|-
|hashPrev||uint256||前一区块hash
|-
|hashMerkle||uint256||vtx所包含transaction构建的Merkle Tree Root
|-
|vchProof||vector < uint8 >||用于校验共识合法性数据
|-
|txMint||CTransaction||出块奖励交易
|-
|vtx||vector < CTransaction >||当前区块包含交易列表
|-
|vchSig||vector < uint8 >||区块签名
|}

目前区块版本为0x0001。时间戳采用UTC以秒为单位。vchProof包括了合法性证明系列化数据，在安全主链中，包括DPOS节点广播的计算结果（包括各节点签名），POW区块中还包括工作量证明参数；在业务分支中，包含同高度主链区块hash和共识计算结果。txMint不进行签名，签名字段为空。区块签名vchSig使用txMint输出地址进行签名，签名数据段包含除vchSig以外所有字段。

=== 交易结构 ===
FnFn采用UTXO模型记录交易，包括以下数据：
{| class="wikitable"
|-
!|名称
!|数据类型
!|描述
|-
|nVersion||uint16||版本号
|-
|nType||uint16||类型,区分公钥地址交易、模板地址交易、即时业务交易和跨分支交易
|-
|nLockUntil||uint32||交易冻结至高度为nLockUntil区块
|-
|hashAnchor||uint256||交易有效起始区块HASH
|-
|vInput||vector < CTxIn >||前序交易输出列表，包含前序交易ID和输出点序号
|-
|addrTo||CDestination||输出地址
|-
|nAmount||int64||输出金额
|-
|nTxFee||int64||网络交易费
|-
|vchData||vector < uint8 >||输出参数（模板地址参数、跨分支交易共轭交易）
|-
|vchSig||vector < uint8 > ||交易签名
|}

目前交易版本为0x0001。hashAnchor用于指明当前交易起始有效区块以及对应分支。输入列表中的前序交易要求输出地址相同。 交易包括两项输出，一项为表中所列（addrTo/nAmount），另外一项是隐含的找零输出，地址同输入地址，金额为（Total  Input - nAmount  - nTxFee）。交易签名用输入列表统一地址，签名数据段包含除vchSig以外所有字段。

=== 跨分支交易 ===

FnFn不同分支虽然相互独立，但各分支处以高度同步，可以安全引用其它分支数据作为有效证明，实现快速跨分支交易。跨分支交易需要双方在自己分支上创建交易，交易数据中包含对方交易证明，把对应token发送到双方一致的跨分支交易模板地址。正常情况下，双方交易会在同一区块高度记录到不同分支区块，双方可从交易模板地址取回交换后的token。

跨分支交易证明：假设已创建交易tx，对tx除vchData和vchSig以外其他字段进行hash计算，结果为交易证明。交易证明被用于验证双方交易是否被正确记录到各自分支区块中。

[[Image:Crosstx.png|center|800px|5.1 跨分支交易]]
<center>5.1 跨分支交易</center>

== 共识机制 ==

FnFn共识机制为DPOS+POW，以DPOS为主导，决定下次获得出块权的节点或者指明下一区块由工作量证明共识产生。在DPOS机制未能有效建立时，例如启动初始阶段，POW成为唯一的出块共识机制。
  
=== DPOS节点协商过程 ===

DPOS节点以所持token投票数作为出块权重，通过随机数计算产生固定出块节点系列。DPOS机制建立后，通过DPOS节点之间协商产生随机数。协商过程每分钟进行一轮，通过加权VSS+BA方式进行公平随机计算。

每轮协商都包括以下几个过程：1)节点登记；2)加密分片数据分发；3)秘密分片公布；4)数据重构和随机信标计算。

[[Image:Mprand.png|center|800px|图6.1 DPOS协商过程]]
<center>图6.1 DPOS协商过程</center>

在每轮协商之前，每个DPOS节点需要利用ECC算法产生一组私钥 ： {a<sub>0</sub>,a<sub>1</sub>,…,a<sub>t-1</sub>}以及对应公钥：{A<sub>0</sub>,A<sub>1</sub>,…,A<sub>t-1</sub>}，满足 A<sub>i</sub> = a<sub>i</sub>G 其中i = 0,1,…,t-1。 t为重构数据的门限值，根据对有效DPOS节点设定，t最大值为50。

1. 节点登记

DPOS节点在本轮协商对标区块16个区块之前将登记信息广播上链，包括加密后的多项式系数 {A<sub>0</sub>,A<sub>1</sub>,…,A<sub>t-1</sub>},A<sub>0</sub>作为节点协商公钥。

2. 加密数据分发

分发开始于协商对标区块之前16区块止于前一区块。分发过程开始时，根据登记节点的顺序和权重分配计算序号，每个节点分配到的计算序号数量= [token vote/（total supply x 2%)] 。

节点i根据其它节点j发布的协商公钥创建共同密钥K<sub>ij</sub>，将秘密分片s<sub>ij</sub>以K<sub>ij</sub>加密后广播全网，对应节点j解密后可以用节点i的登记信息对s<sub>ij</sub>进行校验。其中s<sub>ij</sub>下式计算：

[[Image:Vssf1.png|120px]]
   
由于节点i的加密公钥{A<sub>0</sub>,A<sub>1</sub>,…,A<sub>t-1</sub>}在登记过程已公布，节点j通过下式进行校验：

[[Image:Vssf2.png|120px]]

若上式成立，说明节点i发送了正确秘密分片。

3. 秘密分片公布

当前一区块广播后，每个节点将通过校验的所有秘密分片广播全网，全网节点在收集到解密的节点分片，也可以通过上面公式进行校验，最终剔除恶意节点数据后将有效数据进行计算。
   
4. 数据重构和随机信标计算

全网节点在收集节点i的t个秘密分片就可通过拉格朗日方程重构{a<sub>0</sub>,a<sub>1</sub>,…,a<sub>t-1</sub>}，不能收集到t个通过校验秘密分片的节点会被剔除，不能进入下一阶段计算。重复上述计算过程，最终可获取所有有效节点数据。此过程中，所有可靠节点计算结果将一致，通过组合计算，得到全网一致的随机信标。由于用于计算的数据分别由各DPOS节点随机提供，在进行到最后一步计算前，都无法获知其它节点的数据。作弊节点在校验和重构阶段就会被剔除，在不考虑51%攻击的情况下，没有节点可以控制最终计算结果，因此可以认为产生的随机信标具备真随机属性。

=== 出块权权分配 ===
在DPOS机制没有有效建立起来的情况下，当前区块由POW共识产生。当DPOS协商成功完成，就会用随机信标进行掷骰过程，假设DPOS节点i的token投票为V<sub>i</sub>，总的DPOS投票V<sub>d</sub> = V<sub>0</sub> + V<sub>1</sub> +...+ V<sub>n</sub>，总token供应量为S。

POW等效投票为 V<sub>work</sub> = S X (1 - V<sub>d</sub> / S)^3

节点i 获得出块权的概率 P<sub>i</sub> = V<sub>i</sub> /（V<sub>d</sub> +V<sub>work</sub>)

POW获得出块权概率 P<sub>work</sub>= V<sub>work</sub> / (V<sub>d</sub> +V<sub>work</sub>)

重复上过程，就可以得到确定的出块序列。按照出块序列，对应节点完成当前区块出块，并将解密后的协商最后一步计算过程记录进区块，自证出块合法性。

在经过DPOS协商，确定的出块系列可以被所有节点一致计算验证，除了指定确定节点进行出块，有一定概率指定POW出块。如上面公式，POW区块被选中的概率和参与DPOS协商总token数量相关：
{| class="wikitable"
|-
!|V<sub>d</sub> / S
!|P<sub>work</sub>
|-
|0||100%
|-
|0.25||62.8%
|-
|0.5||20%
|-
|0.75||2%
|-
|1||0%
|}

在起始阶段，参与DPOS的节点和token比较少，共识机制退化为以POW为主，当越来越多token参与到DPOS过程，POW出块几率会迅速降低。

== 网络功能单元 ==

=== 网络节点 ===

FnFn的网络节点上运行核心钱包程序，核心钱包的构成如下图：

[[Image:Module.png|center|800px|图7.1 核心钱包架构]]
<center>图7.1 核心钱包架构</center>

核心钱包底层由一系列基本库和工具类构成，提供包括数据存储、数据库访问、安全算法、应用程序框架、P2P网络/HTTP等底层程序接口。中间层包括区块数据/实时交易管理、用户钱包、区块产生构造几部分，分别用于校验管理特定分支区块/交易数据、内置用户钱包密钥和用户交易管理、DPOS/POW共识出块。上层P2P网络层实现节点网络协议，一方面管理调度和其它节点的网络连接以及数据请求，另一方面通过数据分发接口同中间层进行数据同步交换。核心钱包通过JSONRPC和SOCKET API两种方式同外部服务进行交互以提供节点控制和功能扩展，JSONRPC主要面向RPC客户端程序、钱包图形化界面、钱包节点管理等人机交互应用，SOCKET API则为轻钱包服务和分布式节点部署提供高速数据同步通道。这两种外部接口由API SERVICE提供核心功能汇聚。

=== 轻钱包服务与客户端 ===

LWS（Light wallet service）是可扩展的轻钱包服务平台，作为FnFn核心网络和IOT设备的中间服务层，为运行FnFn客户端程序的IOT设备提供FnFn网络接入，实现设备自身交易数据同步和交易发送。
  
IOT设备网络在应用上具备低带宽、高并发等特点，业务和设备条件又对响应延迟和功耗有相当苛刻的要求，LWS和IOT设备之间通信以MQTT协议作为底层传输协议，通过MQTT broker实现数据交换。

[[Image:Lws.png|center|800px|图7.2 LWS-IOT网络结构]]
<center>图7.2 LWS-IOT网络结构</center>

通过核心钱包程序的SOCKET API接口，LWS连接FnFn节点获取实时区块/交易数据。LWS重整分析这些数据，为对应客户端用户提供轻钱包后台服务。

MQTT是目前最适合IOT设备数据通信的传输协议之一，以订阅/发布方式实现设备-设备/设备-服务数据交换，现有服务平台可以提供千万数量级设备接入业务。

FnFn客户端程序作为IOT设备Firmware的一部分，利用设备中央处理器和安全计算协处理器处理包括交易构建/解析、HASH、ED25519签名/校验等FnFn交易相关计算。设备私钥被存放处理芯片安全区域，不可被直接读取。

LWS和FnFn客户端之间的通过协议过程实现客户端UTXO列表同步和实时更新，LWS响应FnFn客户端发送交易请求，通过连接的网络节点将交易广播全网。

[[Image:Lwsiot.png|center|800px|图7.3 LWS-IOT协议流程]]
<center>图7.3 LWS-IOT协议流程</center>

Service Req/Reply ： FnFn客户端发起服务请求，传递协议版本、钱包地址和所需分支等信息；LWS在可提供服务的前提下，返回用于构造APIKey的数据和所支持分支列表；APIKey被用于后续消息签名。

Sync Req/Reply ： FnFn客户端发起同步请求，传递目前记录UTXO列表HASH；LWS将UTXO列表HASH进行对比，在判定客户端失步的情况下，推送对应UTXO列表。

Update UTXO ： 在Block/Tx状态更新（新块产生、交易广播）时，网络节点会通过SOCKET API通知LWS，LWS在筛选过滤后将UTXO的状态变化推送至对于FnFn客户端。

SendTx Req/Reply ： FnFn客户端根据同步的UTXO列表构造交易并进行签名，通过LWS将交易广播全网；LWS返回执行状态。

=== 分布式超级节点 ===

FnFn是个多分支的区块系统，参与DPOS的节点需要为所有有价值的分支进行同步出块。随着业务分支数量增加，出块节点的负担会日趋加重，单服务器无法满足系统本身可扩展性要求，分布式超级节点是解决这一问题的有效方案。


[[Image:Suppernode.png|center|800px|图7.4 分布式超级节点]]
<center>图7.4 分布式超级节点</center>

在分布式超级节点方案中，持有出块签名密钥的服务器称为DPOS节点服务器。DPOS节点服务器接入FnFn网络，一方面进行安全主链上的DPOS协商，另一方面和网络中其它节点交互各分支Block/Tx同步数据。DPOS节点服务器只存储检验安全主链的数据，业务分支数据则交付后端对应的分支节点服务器。分支节点服务器群和DPOS节点服务器通过SOCKET API连接，接收处理对应分支数据。

当DPOS协商当前DPOS节点被选中为出块节点时，DPOS节点服务器构造主链新块，并把分支出块上下文数据推送各分支节点服务器。分支节点服务器构造各自分支新块数据传送给DPOS节点服务器，DPOS节点服务器完成新块签名后广播全网。

在进一步的升级扩展中，分布式超级节点可以级联方式构建分支节点服务器群：

[[Image:Cascadessn.png|center|800px|图7.5 级联扩展]]
<center>图7.5 级联扩展</center>

== IOT数据业务模型 ==

IOT实时数据交易业务以交易订单形式构建，由数据需求方发起交易，将token发送至订单交易模板地址。一旦订单交易上链确认，数据提供方校验交易合法性后建立实时数据通道，并且立即发送一个带时间戳、有效期以及当前消费token数量的交易证明给数据需求方。在此之后，每当交易证明超过有效期，数据提供方应更新交易证明。假设双方约定以t为数据结算周期，每经过t间隔，数据需求方以签名证明作为ack发送给对方；任何时候交易中断或结束，数据提供方以最后的签名证明从链上对应订单交易提取消费token。

[[Image:Iotflow.png|center|800px|图8.1 IOT数据交易过程]]
<center>图8.1 IOT数据交易过程</center>

当数据提供方先从订单交易提取token,需求方可以随后立即取回剩余token。如提供方没有转移对应token，需求方也可用一个包含有效交易证明的交易取回token，该交易会被广播但会被出块节点锁定30区块高度。如不包含有效交易证明，会从订单交易所在区块开始锁定2880区块高度。锁定期间，数据提供方如有争议，可以发送自己有效交易优先取回token,争议交易会被丢弃。

== 术语解释 ==

* 分叉: 在区块链系统中，通过规则改变新旧规则的区块不兼容，从而形成以规则升级为分叉点，两条独立运行的链。
* 树状区块链：以主链为根，通过分叉的方式不断生成支链为枝叶的多级链式结构。
* 共识机制：在分布式系统当中，为了保持数据在各个不可靠的节点间的一致性，使节点之间达成数据写入提案的过程。
* VSS：Verifiable Secret Sharing，可验证的秘密共享。是一种用于数据安全存储、传输及合法应用的安全协议。由秘密份额的分配算法和秘密的恢复算法两种算法构成。
* DPOS：Delegated Proof of Stake，委任权益证明。是一种类似董事会结构的区块链共识机制。其基本特点为社区每一个持币人进行投票，然后选出特定数量的见证人，由见证人负责交易的确认和区块的生成。
* POW：Proof Of Work，工作量机制。是一种通过算力竞争的方式夺取区块链记账权的共识机制，最早被中本聪应用在比特币系统当中。

